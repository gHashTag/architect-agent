import * as dotenv from "dotenv";
import { Telegraf } from "telegraf";
import { logger, LogLevel, LogType } from "./utils/logger";
import { config } from "./config";
import { Scenes, session as sessionMiddleware } from 'telegraf';
import { chatScene } from './scenes/chat-scene';
import { documentScene } from './scenes/document-scene';
import { BotContext } from './types/bot';
import { handleAICommand, handleAIStopCommand, handleAIMessage, AIContext } from './utils/aiAssistantHandler';

let bot: Telegraf<BotContext>;

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async function startBot() {
  logger.info("Starting bot initialization...", { type: LogType.SYSTEM });
  dotenv.config();
  logger.info("Environment variables loaded", { type: LogType.SYSTEM });

  logger.configure({
    logToConsole: true,
    minLevel: LogLevel.DEBUG,
  });
  logger.info("Logger configured", { type: LogType.SYSTEM });

  const BOT_TOKEN = config.bot.token;
  logger.info("BOT_TOKEN status", { 
    type: LogType.SYSTEM,
    hasToken: !!BOT_TOKEN 
  });
  
  if (!BOT_TOKEN) {
    logger.fatal("BOT_TOKEN not found in .env file or configuration", {
      type: LogType.SYSTEM,
    });
    process.exit(1);
  }

  logger.info("Creating Telegraf instance...", { type: LogType.SYSTEM });
  bot = new Telegraf<BotContext>(BOT_TOKEN);
  logger.info("Telegraf instance created", { type: LogType.SYSTEM });

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ü–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º BotContext 
  logger.info("Creating scene manager...", { type: LogType.SYSTEM });
  const stage = new Scenes.Stage([chatScene, documentScene]);
  logger.info("Scene manager created", { type: LogType.SYSTEM });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware –¥–ª—è —Å—Ü–µ–Ω
  logger.info("Setting up middleware...", { type: LogType.SYSTEM });
  bot.use(sessionMiddleware());
  bot.use(stage.middleware());
  logger.info("Middleware setup completed", { type: LogType.SYSTEM });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç-–±–æ—Ç–∞
  bot.command('chat', async (ctx) => {
    logger.info("Chat command received", { 
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      username: ctx.from?.username 
    });
    await ctx.scene.enter('chat');
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
  bot.command('documents', async (ctx) => {
    logger.info("Documents command received", { 
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      username: ctx.from?.username 
    });
    await ctx.scene.enter('document');
  });

  // üïâÔ∏è AI-–ê–ì–ï–ù–¢ –ö–û–ú–ê–ù–î–´
  bot.command('ai', async (ctx) => {
    await handleAICommand(ctx as AIContext);
  });

  bot.command('ai_stop', async (ctx) => {
    await handleAIStopCommand(ctx as AIContext);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è AI –¥–∏–∞–ª–æ–≥)
  bot.on('text', async (ctx) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ AI –¥–∏–∞–ª–æ–≥–µ
    await handleAIMessage(ctx as AIContext);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ AI –¥–∏–∞–ª–æ–≥, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ handleAIMessage
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  });

  // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.start(async (ctx) => {
    logger.info("Start command received", { 
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      username: ctx.from?.username 
    });
    const userFirstName = ctx.from?.first_name || "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü";
    await ctx.reply(
      `üèóÔ∏è –ü—Ä–∏–≤–µ—Ç, ${userFirstName}! –Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞.\n\n` +
      `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/chat - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n` +
      `/documents - –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n` +
      `/ai - ü§ñ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º\n` +
      `/ai_stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º\n` +
      `/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É`
    );
  });

  bot.help(async (ctx) => {
    logger.info("Help command received", { 
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      username: ctx.from?.username 
    });
    const helpMessage =
      "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
      "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
      "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
      "/chat - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n" +
      "/documents - –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n\n" +
      "üèóÔ∏è **AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä:**\n" +
      "/ai - –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º\n" +
      "/ai_stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º\n\n" +
      "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞:\n" +
      "- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–∏–∑–∞–π–Ω\n" +
      "- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ HAUS –±–ª–æ–∫–∞–º\n" +
      "- –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n" +
      "- –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n" +
      "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã\n\n" +
      "üìÑ –í —Ä–µ–∂–∏–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n" +
      "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n" +
      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n" +
      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n" +
      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n" +
      "- –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–∏–Ω–∞—è —Å '?' –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ª–æ–≤–æ '–≤–æ–ø—Ä–æ—Å'";
    await ctx.reply(helpMessage);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err: any, ctx) => {
    logger.error("Bot error occurred", {
      type: LogType.SYSTEM,
      error: err instanceof Error ? err : new Error(String(err)),
      userId: ctx.from?.id,
      username: ctx.from?.username,
      data: { message: (ctx.message as any)?.text }
    });
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(() => {});
  });

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  try {
    logger.info("Launching bot...", { type: LogType.SYSTEM });
    await bot.launch();
    logger.info("Bot launched successfully!", { type: LogType.SYSTEM });
  } catch (error) {
    logger.fatal("Error launching bot", {
      type: LogType.SYSTEM,
      error: error instanceof Error ? error : new Error(String(error))
    });
    process.exit(1);
  }

  // Graceful shutdown
  process.once("SIGINT", () => {
    logger.info("Received SIGINT, stopping bot...", { type: LogType.SYSTEM });
    bot.stop("SIGINT");
  });
  process.once("SIGTERM", () => {
    logger.info("Received SIGTERM, stopping bot...", { type: LogType.SYSTEM });
    bot.stop("SIGTERM");
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
logger.info("Starting bot...", { type: LogType.SYSTEM });
startBot().catch((error) => {
  logger.fatal("Critical error during bot startup", {
    type: LogType.SYSTEM,
    error: error instanceof Error ? error : new Error(String(error))
  });
  process.exit(1);
});
