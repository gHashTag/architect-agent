import { Context } from 'telegraf'
import { getAiFeedbackFromOpenAI, ARCHITECT_AGENT_ASSISTANT_ID } from './getAiFeedbackFromOpenAI'
import { logger, LogType } from './logger'

export interface AIContext extends Context {
  // –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞
  session?: {
    awaitingAIResponse?: boolean
    userLanguage?: string
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai - –∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Å AI-–∞–≥–µ–Ω—Ç–æ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º
 */
export async function handleAICommand(ctx: AIContext) {
  try {
    logger.info('AI command received', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      username: ctx.from?.username
    })

    const userFirstName = ctx.from?.first_name || '–£–≤–∞–∂–∞–µ–º—ã–π –ö–ª–∏–µ–Ω—Ç'
    const userLanguage = ctx.from?.language_code || 'ru'

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!ctx.session) {
      ctx.session = {}
    }
    ctx.session.userLanguage = userLanguage

    const welcomeMessage = `üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É!

ü§ñ –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É.

üìê –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞:
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –¥–∏–∑–∞–π–Ω–µ
- HAUS –±–ª–æ–∫–∞—Ö –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
- –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–∞—Ö –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö

üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∏ —è –¥–∞–º –≤–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!

‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai_stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞`

    await ctx.reply(welcomeMessage)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞
    ctx.session.awaitingAIResponse = true

  } catch (error) {
    logger.error('Error in AI command handler', {
      type: LogType.SYSTEM,
      error: error instanceof Error ? error : new Error(String(error)),
      userId: ctx.from?.id
    })
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AI-–∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai_stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å AI-–∞–≥–µ–Ω—Ç–æ–º
 */
export async function handleAIStopCommand(ctx: AIContext) {
  try {
    logger.info('AI stop command received', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      username: ctx.from?.username
    })

    if (ctx.session) {
      ctx.session.awaitingAIResponse = false
    }

    const farewellMessage = `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –±–µ—Å–µ–¥—É!

üèóÔ∏è –î–∏–∞–ª–æ–≥ —Å AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–¥–µ—é—Å—å, –Ω–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!

üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

üåü –£–¥–∞—á–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!`

    await ctx.reply(farewellMessage)

  } catch (error) {
    logger.error('Error in AI stop command handler', {
      type: LogType.SYSTEM,
      error: error instanceof Error ? error : new Error(String(error)),
      userId: ctx.from?.id
    })
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞.')
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞
 */
export async function handleAIMessage(ctx: AIContext) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã AI –æ—Ç–≤–µ—Ç
    if (!ctx.session?.awaitingAIResponse) {
      return // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ AI –¥–∏–∞–ª–æ–≥–∞
    }

    const messageText = (ctx.message as any)?.text
    if (!messageText) {
      await ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞.')
      return
    }

    logger.info('Processing AI message', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      textLength: messageText.length
    })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await ctx.sendChatAction('typing')

    const userFirstName = ctx.from?.first_name || '–£–≤–∞–∂–∞–µ–º—ã–π –ö–ª–∏–µ–Ω—Ç'
    const userLanguage = ctx.session.userLanguage || 'ru'

    // –í—ã–∑—ã–≤–∞–µ–º AI-–∞–≥–µ–Ω—Ç–∞
    const aiResponse = await getAiFeedbackFromOpenAI({
      assistant_id: ARCHITECT_AGENT_ASSISTANT_ID,
      report: messageText,
      language_code: userLanguage,
      full_name: userFirstName
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ë–ï–ó Markdown –ø–∞—Ä—Å–∏–Ω–≥–∞
    await ctx.reply(aiResponse.ai_response)

    logger.info('AI response sent successfully', {
      type: LogType.USER_ACTION,
      userId: ctx.from?.id,
      responseLength: aiResponse.ai_response.length
    })

  } catch (error) {
    logger.error('Error processing AI message', {
      type: LogType.SYSTEM,
      error: error instanceof Error ? error : new Error(String(error)),
      userId: ctx.from?.id
    })

    const errorMessage = `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI-—Å–µ—Ä–≤–∏—Å–æ–º
- –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤  
- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai_stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.`

    await ctx.reply(errorMessage)
  }
} 