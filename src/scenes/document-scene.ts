import { Scenes } from 'telegraf';
import { logger, LogType } from '../logger';
import { BotContext } from '../types/bot';

// –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ BaseScene
export const documentScene = new Scenes.BaseScene<BotContext>('document');

documentScene.enter(async (ctx) => {
  logger.info("Entering document scene", {
    type: LogType.SYSTEM,
    userId: ctx.from?.id,
    username: ctx.from?.username
  });
  await ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏!\n\n' +
    '–í—ã –º–æ–∂–µ—Ç–µ:\n' +
    '1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n' +
    '2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n' +
    '3. –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /exit\n\n' +
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.'
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
documentScene.on('text', async (ctx) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '/')
  if (ctx.message.text.startsWith('/')) {
    return;
  }

  try {
    const text = ctx.message.text;
    logger.info("Processing text in document scene", {
      type: LogType.SYSTEM,
      userId: ctx.from?.id,
      username: ctx.from?.username,
      textLength: text.length
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–µ—Å—Å–∏–∏
    const session = ctx.scene.session as any;
    session.currentDocument = {
      text,
      metadata: {
        timestamp: new Date().toISOString(),
        source: 'telegram',
        userId: ctx.from?.id
      }
    };

    logger.info("Document saved in session", {
      type: LogType.SYSTEM,
      userId: ctx.from?.id,
      documentLength: text.length
    });

    await ctx.reply(
      '–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n\n' +
      '1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–π)\n' +
      '2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (/view)\n' +
      '3. –û—á–∏—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (/clear)\n' +
      '4. –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (/exit)'
    );
  } catch (error) {
    logger.error('Error in document scene', {
      type: LogType.SYSTEM,
      error: error instanceof Error ? error : new Error(String(error)),
      userId: ctx.from?.id,
      username: ctx.from?.username
    });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
documentScene.command('view', async (ctx) => {
  try {
    const session = ctx.scene.session as any;
    const document = session.currentDocument;
    
    logger.info("View command received", {
      type: LogType.SYSTEM,
      userId: ctx.from?.id,
      hasDocument: !!document
    });

    if (!document) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
      return;
    }

    await ctx.reply(
      `üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:\n\n${document.text}\n\n` +
      `üìÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${document.metadata.timestamp}`
    );
  } catch (error) {
    logger.error('Error viewing document', {
      type: LogType.SYSTEM,
      error: error instanceof Error ? error : new Error(String(error)),
      userId: ctx.from?.id,
      username: ctx.from?.username
    });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏
documentScene.command('clear', async (ctx) => {
  logger.info("Clear command received", {
    type: LogType.SYSTEM,
    userId: ctx.from?.id,
    username: ctx.from?.username
  });

  const session = ctx.scene.session as any;
  session.currentDocument = undefined;
  await ctx.reply('–î–æ–∫—É–º–µ–Ω—Ç –æ—á–∏—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
documentScene.command('exit', async (ctx) => {
  logger.info("Exiting document scene", {
    type: LogType.SYSTEM,
    userId: ctx.from?.id,
    username: ctx.from?.username
  });

  await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.');
  await ctx.scene.leave();
}); 